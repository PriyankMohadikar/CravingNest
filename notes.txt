 Table Name =state		
                stateId		
                stateName		

Table Name =city		
                cityId		
                cityName		
		
Table Name = area		
                areaId	integer	
                areaName	string	
                cityId	integer | dropdow	city FK 
		
Table Name = location		same as area
                Integer locationId;	1	
                String title;	Ajay's	
                String category;	fast food 	
                String description;	xxxxx	
                String timings;	morning : 9-11 even 5-7  night 9-1	
                boolean active;		
		
                String contactNumber;		
                String address;		
                Integer cityId;	FK	dropdown
                Integer areaId;	FK	dropdown
                foodType: string		
                double latitude;		
                double longitude;		
		
Table Name = users		
                userId	int	CRUD
                firstname		
                lastname		
                gender		
                contact		
                email		
                password		
                age		
                profilePicPath		
		
Table Name = offers		same as area 
            Integer offerId;		
            String title;		
            String description;		
            boolean active;		
            Date startDate;		
            Date endDate;		
            Integer locationId;	FK	
            foodType: string	burger , pizza , pasta 	
		
Table Name = ratings		
            ratingsId	PK	
            offerId	FK: Offer	
            comments	awesome , burger specific  ,	
            rating	3-4-5-1-2	1 to 5
---------------------------------------------------------------------
            list logic 

	1) controller -> @Getmapping("listmember")
	2) public String listMember(){
			return "ListMember";//jsp name 
		} 	
	3) create a jsp -> WEB-INF/views/ListMember.jsp 
	
	4) get all the data from database to controller 
	   we will use repository -> finaAll() method 
	    public String listMember(){
		List<MemberEntity> memberList = repositoryMember.findAll(); // read all members from db to controller 
			return "ListMember";//jsp name 
		}
	
	5) how to send data from controller to jsp 
		//Model 
		model.addAttribute("memberList", memberList);
						//dataName , dataValue 
		
		public String listMember(){
		    List<MemberEntity> memberList = repositoryMember.findAll(); // read all members from db to controller 
			model.addAttribute("memberList", memberList);
			return "ListMember";//jsp name 
		}
		
	6) get for loop print 
		
	
	
	
---------------------------------------------------------------
#JSTL  java standard tag lib --> 
		core********* 
		sql
		xml
		fmt
			core tag 
				if** 
				case 
				catch 
				out 
				set
				forEach** 
				forToken
---------------------------------------------------------------	

#Email --> Welcome mail -> Signup 
 
 
 #create service folder inside grownited folder 
 
 1) pom.xml jar file -> mail -> java mail 
 	project -> right click -> spring -> add/edit starter -> mail -> select -> next -> pom.xml ->
 		finish 
	
	
 2) mail -> gmail -> configuration -> 
 					application.properties {copy}
 					
	https://myaccount.google.com/apppasswords
	
3) code -> 
		JavaMailSender [copy] 	
		
-----------------------------------------------------------

#Redirect logic :
	After saving details(from form then to navigate we use redirect(use URL)(Have controller url name) to another jsp)
	Shift to another url
-> return "redirect:/login";				

----------------------------------------------------------

#Sending data from controller to JSP
     We use Model -> and Create model obj and use of addAttribute To send list to jsp page
public String viewuser(Model model) {
		List<UserEntity> userlist = repoUser.findAll();
		model.addAttribute("userlist", userlist);
		return "Listuser";
	}
	
----------------------------------------------------------

how to encode password using bcrypt 

1) pom.xml add spring security crypto lib [from google - maven ] 

2) now make your encoder singleton ready 
	put below code in your main java file where @SpringBootApplication written
	@Bean
	PasswordEncoder encoder() {
		return new BCryptPasswordEncoder(5);
	}
	
3) now create object using @Autowired and use in the method 
	//object creation 
	@Autowired
	PasswordEncoder encoder;
	
	//use 
	String encPassword = encoder.encode(userEntity.getPassword());
	userEntity.setPassword(encPassword);	
		
----------------------------------------------------------
# how to delete and View Data by Id 
20/2
First View -- findById(userId) -- optional For nullpointerException
Delete User -- deleteById(userId)

-----------------------------User List Table----------------------------------
<div class="container mt-4">
    <h2 class="text-center mb-4">List of Users</h2>
    
    <table id="userTable" class="table table-striped table-bordered table-hover table-dark">
        <thead class="table-dark">
            <tr>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Email</th>
                <th>Gender</th>
                <th>Role</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <c:forEach items="${userlist}" var="user">
                <tr>
                    <td>${user.firstName}</td>
                    <td>${user.lastName}</td>
                    <td>${user.email}</td>
                    <td>${user.gender}</td>
                    <td>${user.role}</td>
                    <td>
                        <a href="viewuser?userId=${user.userId}" class="btn btn-info btn-sm">View</a>
                        <a href="deleteuser?userId=${user.userId}" class="btn btn-danger btn-sm">Delete</a>
                        <a href="edituser?userId=${user.userId}" class="btn btn-warning btn-sm">Update</a>
                    </td>
                </tr>
            </c:forEach>
        </tbody>
    </table>
</div>

==============================Send otp and update password logic=====================================

1>	First in url sendotp
		we take email from user input and first validate it by FindByEmail();
		and send otp using mailservive method
		and using session we can store otp and email for further validation
		
		// Create sendOtpForPassword for generating otp in mailservice class
			@PostMapping("sendotp")
			public String changepassword(String email,HttpSession session) {
				Optional<UserEntity> op = repoUser.findByEmail(email);
				if(op.isEmpty()) {
					return "ChangePassword";
				}else {
					String otp = serviceMail.sendOtpForPassword(email);
					session.setAttribute("otp", otp);
					session.setAttribute("email",email);
					return "ChangePassword";
				}
			}

2>		Second validating email and then -> to Changepassword URL in which takes email,password and otp.
		and check email and using FindByEmail() get optional<userentity> and UserEntity user = op.get();
		from session get the otp and match it with user entered otp from mail.
		if matches then encode the password and update it with repouser.save(updatedpassword);
		and invalidate session.
=========================================================================================================		
		
## Join City and State table	
		
  **Using Concept Data transfer object and custom query
	  -first create custom query in cityrepository
		@Query(value = "select c.*,s.state_Name from cities c,state s where c.state_id = s.state_id",nativeQuery = true)
		List<Citydto> getAll();

	**And Creating Citydto in dto folder with city data fields and stateId fK and constructor
		and in citycontroller
				List<Citydto> city = repocity.getAll();
				model.addAttribute("city", city);
==================================================================================

Work pending - 25/3/25
	in AddOffer jsp Create Upload File functionality
	navbar settings
	offers jsp where active offers View
	Admin panel - listoffers,Ratingwise List of Location 
	push in GitHub


============================IMp Connections

Location -> LocationID
Offer -> offerId Pk -> Location FK         -- Connect location table
ratings -> offerId FK  -- Connects offer table 

==============================- *Location and PlaceRating IMPSS*  ==================================
				  ** Restaurant Ratings **
// View Particular Location/Restaurant/Food_Place  -- *Location and PlaceRating IMPSS*
	@GetMapping("locationdetails")
	public String showofferdetails(Integer locationId, Model model) {
		Optional<LocationEntity> locationop = locationrepo.findById(locationId);
		if (locationop.isPresent()) {
			model.addAttribute("location", locationop.get());
			List<RatingEntity> details = ratingrepo.findByOfferId(locationId);
			model.addAttribute("ratings", details);
		}
		return "OfferDetial";
	}

====================================IMPS==========================================

					** For Restaurants Comments and Ratings ** I HAVE MADE NECESSARY CHANGES IN ENTITY AND RESOR
location table -> Rating table using locationId -> OfferDetial.jsp TO Change in RestoRatings.jsp
IN Rating table change to locationId

					** For Restaurants -> Offers -> Comments and Ratings **
Location -> Offer -> RatingForOffers -> using offerId -> OffersRatings.jsp

===================================================================================










	